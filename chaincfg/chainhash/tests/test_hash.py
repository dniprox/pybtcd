import unittest
from ..hash import *

MainNetGenesisHash = Hash(bytes([0x6f, 0xe2, 0x8c, 0x0a, 0xb6, 0xf1, 0xb3, 0x72,
                                 0xc1, 0xa6, 0xa2, 0x46, 0xae, 0x63, 0xf7, 0x4f,
                                 0x93, 0x1e, 0x83, 0x65, 0xe1, 0x5a, 0x08, 0x9c,
                                 0x68, 0xd6, 0x19, 0x00, 0x00, 0x00, 0x00, 0x00]))


class TestHash(unittest.TestCase):
    def test_hash_init(self):
        # test hash from bytes
        Hash(bytes([0x79, 0xa6, 0x1a, 0xdb, 0xc6, 0xe5, 0xa2, 0xe1,
                    0x39, 0xd2, 0x71, 0x3a, 0x54, 0x6e, 0xc7, 0xc8,
                    0x75, 0x63, 0x2e, 0x75, 0xf1, 0xdf, 0x9c, 0x3f,
                    0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))

        # test hash from str
        Hash("14a0810ac680a3eb3f82edc878cea25ec41d6b790744e5daeef")

    def test_hash_str(self):
        # Block 100000 hash.
        self.assertEqual(str(Hash(bytes([0x06, 0xe5, 0x33, 0xfd, 0x1a, 0xda, 0x86, 0x39,
                                         0x1f, 0x3f, 0x6c, 0x34, 0x32, 0x04, 0xb0, 0xd2,
                                         0x78, 0xd4, 0xaa, 0xec, 0x1c, 0x0b, 0x20, 0xaa,
                                         0x27, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, ]))),
                         "000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506")

    def test_len(self):
        # Ensure proper size.
        self.assertEqual(len(Hash(bytes([0x79, 0xa6, 0x1a, 0xdb, 0xc6, 0xe5, 0xa2, 0xe1,
                                         0x39, 0xd2, 0x71, 0x3a, 0x54, 0x6e, 0xc7, 0xc8,
                                         0x75, 0x63, 0x2e, 0x75, 0xf1, 0xdf, 0x9c, 0x3f,
                                         0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]))), HashSize)

    def test_repr(self):
        buf = bytes([0x79, 0xa6, 0x1a, 0xdb, 0xc6, 0xe5, 0xa2, 0xe1,
                    0x39, 0xd2, 0x71, 0x3a, 0x54, 0x6e, 0xc7, 0xc8,
                    0x75, 0x63, 0x2e, 0x75, 0xf1, 0xdf, 0x9c, 0x3f,
                    0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])

        self.assertEqual(repr(Hash(buf)), buf)

    def test_clone_bytes(self):
        # block 234440 bytes slices
        buf = bytes([0x79, 0xa6, 0x1a, 0xdb, 0xc6, 0xe5, 0xa2, 0xe1,
                     0x39, 0xd2, 0x71, 0x3a, 0x54, 0x6e, 0xc7, 0xc8,
                     0x75, 0x63, 0x2e, 0x75, 0xf1, 0xdf, 0x9c, 0x3f,
                     0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        hash = Hash(buf)
        self.assertEqual(hash.clone_bytes(), buf)

    def test_set_bytes(self):
        block_hash_str = "14a0810ac680a3eb3f82edc878cea25ec41d6b790744e5daeef"
        hash_a = Hash(block_hash_str)

        buf = bytes([0x79, 0xa6, 0x1a, 0xdb, 0xc6, 0xe5, 0xa2, 0xe1,
                     0x39, 0xd2, 0x71, 0x3a, 0x54, 0x6e, 0xc7, 0xc8,
                     0x75, 0x63, 0x2e, 0x75, 0xf1, 0xdf, 0x9c, 0x3f,
                     0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        hash_a.set_bytes(buf)

        self.assertEqual(repr(hash_a), buf)

    def test_is_equal(self):
        # Hash of block 234439.
        # TOCHANGE Here rely on new_hash_from_str, not good
        block_hash_str = "14a0810ac680a3eb3f82edc878cea25ec41d6b790744e5daeef"
        hash_a = Hash(block_hash_str)

        # block 234440 bytes slices
        buf = bytes([0x79, 0xa6, 0x1a, 0xdb, 0xc6, 0xe5, 0xa2, 0xe1,
               0x39, 0xd2, 0x71, 0x3a, 0x54, 0x6e, 0xc7, 0xc8,
               0x75, 0x63, 0x2e, 0x75, 0xf1, 0xdf, 0x9c, 0x3f,
               0xa6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
        hash_b = Hash(buf)

        self.assertFalse(hash_a.is_equal(hash_b))

        # Use clone_bytes
        hash_a.set_bytes(buf)

        self.assertTrue(hash_a.is_equal(hash_b))

    # TOADD add test case for str_decode method
